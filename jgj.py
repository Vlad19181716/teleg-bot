import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from dotenv import load_dotenv
import os
load_dotenv()
# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# List of jokes categorized
jokes = {
    "programmers": [
        "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –£ –Ω—ñ–π –∑–∞–±–∞–≥–∞—Ç–æ –±–∞–≥—ñ–≤.",
        "–Ø–∫ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç —Ä–æ–∑–≤–∞–∂–∞—î—Ç—å—Å—è –Ω–∞ –≤–µ—á—ñ—Ä—Ü—ñ? –ó–∞–ª–∏—à–∞—î –≤—Å—ñ —Ç—Ä—É–±–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏.",
        "–Ø–∫ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ö–æ—Ä–æ—à–∏–π –∫–æ–¥? –Ø–∫—â–æ –≤—ñ–Ω –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ‚Äî —Ü–µ –∫–æ–¥ –Ω–∞ Python!"
    ],
    "animals": [
        "–Ø —Å–ø–∏—Ç–∞–≤ —Å–≤–æ–≥–æ —Å–æ–±–∞–∫—É, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ –¥–≤–∞ –º—ñ–Ω—É—Å –¥–≤–∞. –í—ñ–Ω —Å–∫–∞–∑–∞–≤ '–Ω—ñ—á–æ–≥–æ'.",
        "–ß–æ–º—É —Å–∫–µ–ª–µ—Ç–∏ –Ω–µ –±'—é—Ç—å—Å—è –º—ñ–∂ —Å–æ–±–æ—é? –£ –Ω–∏—Ö –Ω–µ–º–∞—î –∫–∏—à–æ–∫!",
        "–Ø–∫ –∫—Ä–∞–± –ø–æ–∑–¥–æ—Ä–æ–≤–ª—è—î—Ç—å—Å—è –∑ –¥—Ä—É–≥–æ–º? '–ó–¥–æ—Ä–æ–≤–æ, –¥—Ä—É–∂–∏—â–µ!'"
    ],
    "mood": [
        "–Ø —Å–∫–∞–∑–∞–≤ –¥—Ä—É–∂–∏–Ω—ñ, —â–æ –≤–æ–Ω–∞ –º–∞–ª—é—î –±—Ä–æ–≤–∏ –∑–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–æ. –í–æ–Ω–∞ –≤–∏–≥–ª—è–¥–∞–ª–∞ –∑–¥–∏–≤–æ–≤–∞–Ω–æ—é.",
        "–ß–æ–º—É –æ–ø—É–¥–∞–ª–æ –æ—Ç—Ä–∏–º–∞–ª–æ –Ω–∞–≥–æ—Ä–æ–¥—É? –¢–æ–º—É —â–æ –≤–æ–Ω–æ –±—É–ª–æ –≤–∏–¥–∞—Ç–Ω–∏–º —É —Å–≤–æ—î–º—É –ø–æ–ª—ñ!",
        "–ú–æ—è –Ω–∞—Å—Ç—Ä—ñ–π ‚Äì —Ü–µ —è–∫ Wi-Fi: —Å–ø–æ—á–∞—Ç–∫—É —ñ–¥–µ–∞–ª—å–Ω–æ, –∞ –ø–æ—Ç—ñ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–∏—Å–∞—î."
    ]
}

# Command /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏", callback_data='start_jokes')],
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –∂–∞—Ä—Ç", callback_data='add_joke')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç, –¥—Ä—É–∂–µ! –Ø —Ç–≤—ñ–π –Ω–æ–≤–∏–π –≤–µ—Å–µ–ª–∏–π –ø–æ–º—ñ—á–Ω–∏–∫! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–∑–≤–∞–≥–∏ üéâ:", reply_markup=reply_markup)

# Handle button press to show jokes and give rating options
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    category = query.data
    if category == 'add_joke':
        # Request user to enter a new joke
        await query.answer()
        await query.edit_message_text("–¢–∏ —Ö–æ—á–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å —Å–≤–æ—ó–º –∂–∞—Ä—Ç–æ–º? –ù–∞–ø–∏—à–∏ –π–æ–≥–æ —Ç—É—Ç!")
        return
    elif category == 'start_jokes':
        # Send the joke categories for the user to choose from
        await show_joke_categories(update, context)
        return
    elif category in ['programmers', 'animals', 'mood']:
        # Send a random joke from the selected category
        await show_random_joke(update, context)
        return

# Function to show joke categories (programmers, animals, mood)
async def show_joke_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ üë®‚Äçüíª", callback_data='programmers')],
        [InlineKeyboardButton("–¢–≤–∞—Ä–∏–Ω–∏ üêæ", callback_data='animals')],
        [InlineKeyboardButton("–î–ª—è –Ω–∞—Å—Ç—Ä–æ—é üòÑ", callback_data='mood')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —ñ —è —Ä–æ–∑–∫–∞–∂—É —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤–∏–π –∂–∞—Ä—Ç üòé:", reply_markup=reply_markup)

# Handle category selection for showing a random joke
async def show_random_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    category = query.data
    selected_joke = random.choice(jokes[category])  # Choose a random joke from the selected category
    
    # Add thumbs up/down buttons for rating the joke
    rating_keyboard = [
        [InlineKeyboardButton("üëç –¶–µ —Å–º—ñ—à–Ω–æ!", callback_data=f"rate_{category}_thumb_up")],
        [InlineKeyboardButton("üëé –ú–æ–∂–Ω–∞ –∫—Ä–∞—â–µ...", callback_data=f"rate_{category}_thumb_down")]
    ]
    rating_markup = InlineKeyboardMarkup(rating_keyboard)
    
    # Send the joke along with rating options
    await query.answer()  # Acknowledge the button click
    await query.edit_message_text(text=selected_joke, reply_markup=rating_markup)  # Update the message with the joke

# Handle rating submission (thumbs up or thumbs down)
async def rate_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    rating = query.data.split("_")[2]  # Extract rating (thumb_up or thumb_down)
    category = query.data.split("_")[1]  # Extract category (programmers, animals, mood)
    
    # Send acknowledgment of the rating
    if rating == "thumb_up":
        await query.edit_message_text(text="–î—è–∫—É—é –∑–∞ —Ç–≤–æ—é –æ—Ü—ñ–Ω–∫—É! –†–∞–¥—ñ, —â–æ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å! ü•≥")
    else:
        await query.edit_message_text(text="–î—è–∫—É—é –∑–∞ —Ç–≤–æ—é –æ—Ü—ñ–Ω–∫—É! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∂–∞—Ä—Ç –±—É–¥–µ —â–µ –∫—Ä–∞—â–∏–º! üòÖ")

# Handle user input for new jokes
async def handle_joke_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    # Ask the user to select the category
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ üë®‚Äçüíª", callback_data='programmers')],
        [InlineKeyboardButton("–¢–≤–∞—Ä–∏–Ω–∏ üêæ", callback_data='animals')],
        [InlineKeyboardButton("–î–ª—è –Ω–∞—Å—Ç—Ä–æ—é üòÑ", callback_data='mood')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Å–≤–æ–≥–æ –∂–∞—Ä—Ç—É, —â–æ–± —è –º—ñ–≥ –π–æ–≥–æ –¥–æ–¥–∞—Ç–∏:", reply_markup=reply_markup)
    
    # Save the user's joke temporarily until category is selected
    context.user_data['new_joke'] = user_message

# Handle category selection for new jokes
async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.callback_query.data
    new_joke = context.user_data.get('new_joke', None)
    
    if new_joke:
        # Add the joke to the selected category
        jokes[category].append(new_joke)
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(f"–ì–æ—Ç–æ–≤–æ! –¢–≤—ñ–π –∂–∞—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'! üëç")
        # Clear the stored new joke after adding it
        del context.user_data['new_joke']
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É. üòî")

# Main function
def main():
    """Start the bot."""
    BOT_TOKEN = os.getenv('token')  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # Add /start command handler
    application.add_handler(CommandHandler("start", start))
    
    # Add button handler for when a user clicks a category
    application.add_handler(CallbackQueryHandler(button, pattern="^(programmers|animals|mood|add_joke|start_jokes)$"))
    
    # Add handler for rating submissions
    application.add_handler(CallbackQueryHandler(rate_joke, pattern="^rate_"))
    
    # Add handler for joke submissions
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_joke_submission))

    # Add handler for category selection for new jokes
    application.add_handler(CallbackQueryHandler(handle_category_selection, pattern="^(programmers|animals|mood)$"))

    # Start polling for updates
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ü–æ—á–∏–Ω–∞—î–º–æ –≤–µ—Å–µ–ª–∏—Ç–∏—Å—è! üéâ")
    application.run_polling()

if __name__ == '__main__':
    main()
